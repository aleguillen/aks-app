# -----------------------------------------------------------------------------
# .SYNOPSIS
#   This is the main pipeline for Private AKS Deployment. 
#   The main pipeline will orchestrate the build and deploy to environments. 

# .DESCRIPTION
#   This pipeline will perform setup tasks for the image by:
#   1. Copy and Publish Build Artifacts - Terraform scripts.
#   2. Create Storage Account or Terraform State - https://docs.microsoft.com/en-us/azure/terraform/terraform-backend
#   3. Find and replace token (variables) in .tf and .tfvars files.
#   4. Setup Terraform
#   5. Plan and Apply Terraform

# .ASSUMPTIONS:
#     1. You are referencing this template from an ado pipeline

# .NOTES
#     File Name      : aks-infra-azure-pipelines.yml
#     Prerequisite   : ADO Multi-Stage Yaml Pipeline
# -----------------------------------------------------------------------------

name: AKS-Infra-$(Date:yyyyMMdd).$(Rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
      - infra/terraform/private-aks/*

variables:
  - group: aks_dev_vars

  - name: ado_agent_pool
    value: 'UbuntuPrivatePool'
  - name: ado_service_connection_name
    value: 'Azure Subscription'

stages: 
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          name: ${{variables.ado_agent_pool }}
        steps:
        - task: CopyFiles@2
          displayName: 'Copy Files to: $(build.artifactstagingdirectory)/terraform'
          inputs:
            SourceFolder: 'infra/terraform/private-aks'
            TargetFolder: '$(build.artifactstagingdirectory)/terraform'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: infra'
          inputs:
            ArtifactName: infra

  - stage: dev
    displayName: dev
    jobs:
      - job: Deploy
        displayName: Deploy
        pool:
          name: ${{variables.ado_agent_pool }}
        steps:   
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'infra'
            downloadPath: '$(System.DefaultWorkingDirectory)/_artifacts'

        - task: AzureCLI@1
          displayName: 'Azure CLI to deploy required Azure AKS Preview Extension'
          inputs:
            azureSubscription: ${{ variables.ado_service_connection_name }}
            scriptLocation: inlineScript
            inlineScript: |
              az extension add --name aks-preview
              
              # Update the extension to make sure you have the latest version installed
              
              az extension update --name aks-preview
              
              az feature register --name AKSPrivateLinkPreview --namespace Microsoft.ContainerService
              
              az feature register --name MSIPreview --namespace Microsoft.ContainerService
              
              az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService/AKSPrivateLinkPreview')].{Name:name,State:properties.state}"
              
              az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService/MSIPreview')].{Name:name,State:properties.state}"
              
              az provider register --namespace Microsoft.ContainerService
              
              az provider register --namespace Microsoft.Network
        
        - task: AzureCLI@1
          displayName: 'Azure CLI to deploy required Azure resources (Terraform State)'
          inputs:
            azureSubscription: ${{ variables.ado_service_connection_name }}
            scriptLocation: inlineScript
            inlineScript: |
              # Create Azure resource group
              az group create --location $(location) --name $(terraformstoragerg)
              
              # Create Azure Storage Account
              az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location $(location) --sku Standard_LRS --kind StorageV2
              
              # Create Storage Container
              az storage container create --name terraform --account-name $(terraformstorageaccount)
              
              # Create and set Private Endpoint connection to Storage Account
              az network vnet subnet update --ids $(ado_subnet_id) --disable-private-endpoint-network-policies true

              export STORAGE_ID=$(az storage account show -g $(terraformstoragerg) -n $(terraformstorageaccount) --query "id" -o tsv)
              
              az network private-endpoint create --name "$(terraformstorageaccount)-pe" --resource-group $(terraformstoragerg) --subnet $(ado_subnet_id) --private-connection-resource-id $STORAGE_ID --group-ids blob --connection-name "$(terraformstorageaccount)-blobconnection" --manual-request false
              
              # Get Storage Key
              set KEY=$(az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount) --query "[0].value" -o tsv)
              
              # Set Storage Key as Variable for later use
              echo "##vso[task.setvariable variable=storagekey]$KEY"
              
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in terraform file'
          inputs:
            targetFiles: '**/*.tf'
            escapeType: none
            tokenPrefix: '__'
            tokenSuffix: '__'

        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in terraform vars file'
          inputs:
            targetFiles: '**/*.tfvars'
            escapeType: none
            tokenPrefix: '__'
            tokenSuffix: '__'

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: 'Install Terraform 0.12.20'
          inputs:
            terraformVersion: 0.12.20

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : init'
          inputs:
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra/terraform'
            backendServiceArm: ${{ variables.ado_service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: terraform.tfstate

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : plan'
          inputs:
            command: plan
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra/terraform'
            environmentServiceNameAzureRM: ${{ variables.ado_service_connection_name }}
            backendServiceArm: ${{ variables.ado_service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: terraform.tfstate

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : apply -auto-approve'
          inputs:
            command: apply
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra/terraform'
            commandOptions: '-auto-approve'
            environmentServiceNameAzureRM: ${{ variables.ado_service_connection_name }}
            backendServiceArm: ${{ variables.ado_service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: terraform.tfstate

        - task: AzureCLI@1
          displayName: 'Azure CLI to deploy Private Endpoint and Private DNS Zone'
          inputs:
            azureSubscription: ${{ variables.ado_service_connection_name }}
            scriptLocation: inlineScript
            inlineScript: |
              export AKS_ID=$(az aks show --name $(aks_name) --resource-group $(resource_group) --query 'id' -o tsv)
              export AKS_NODE_RG_NAME=$(az aks show --name $(aks_name)  --resource-group $(resource_group) --query 'nodeResourceGroup' -o tsv) 

              az network vnet subnet update --ids $(ado_subnet_id) --disable-private-endpoint-network-policies true
              az network private-endpoint create --name $PE_NAME --resource-group $(resource_group) --subnet $SUBNET_ID --private-connection-resource-id $AKS_ID --group-ids management --connection-name $PE_CONNECTION_NAME

              az network private-endpoint create --name "$(aks_name)-pe" --resource-group $(resource_group) --subnet $(ado_subnet_id) --private-connection-resource-id $AKS_ID --group-ids management --connection-name "$(aks_name)-aksconnection" --manual-request false
              
              # Setting Private DNS Zone on Bastion VNET
              export DNS_ZONE_NAME=$(az network private-dns zone list -g $AKS_NODE_RG_NAME --query "[0].name" -o tsv)
              export A_RECORD_NAME=$(az network private-dns record-set list -g $AKS_NODE_RG_NAME -z $DNS_ZONE_NAME --query "[?type == 'Microsoft.Network/privateDnsZones/A'].name" -o tsv)
              export PE_NIC_ID=$(az network private-endpoint show --name "$(aks_name)-pe" --resource-group $(resource_group) --query "networkInterfaces[0].id" -o tsv)
              export A_RECORD_VALUE=$(az network nic show --ids $PE_NIC_ID --query "ipConfigurations[?name=='privateEndpointIpConfig'].privateIpAddress" -o tsvprivateIpAddress)

              az network private-dns zone create -g $(resource_group) -n $DNS_ZONE_NAME
              az network private-dns record-set a add-record -g $(resource_group) -z $DNS_ZONE_NAME -n $A_RECORD_NAME -a $A_RECORD_VALUE
              az network private-dns link vnet create -g $(resource_group) -n $DNS_LINK_NAME -z $DNS_ZONE_NAME -v $VNET_NAME -e true